package UI

import androidx.compose.animation.core.*
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.selection.SelectionContainer
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

@Composable
fun TTSUI(
    textToSpeech: String,
    onGenerateAudio: () -> Unit,
    onPlayAudio: () -> Unit,
    isGenerating: Boolean,
    isPlaying: Boolean,
    onBackClick: () -> Unit
) {
    // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    val backgroundGradient = Brush.verticalGradient(
        colors = listOf(
            Color(0xFF121212),
            Color(0xFF1E1E2E)
        )
    )

    // –ê–∫—Ü–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
    val accentGradient = Brush.horizontalGradient(
        colors = listOf(
            Color(0xFF8338EC), // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            Color(0xFF3A86FF)  // –°–∏–Ω–∏–π
        )
    )

    val scope = rememberCoroutineScope()
    var audioProgress by remember { mutableStateOf(0f) }
    var showVisualizer by remember { mutableStateOf(false) }

    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–≤—É–∫–∞
    val infiniteTransition = rememberInfiniteTransition()
    val visualizerBars = 10
    val barHeights = List(visualizerBars) { index ->
        infiniteTransition.animateFloat(
            initialValue = 0.1f,
            targetValue = 0.1f,
            animationSpec = infiniteRepeatable(
                animation = keyframes {
                    durationMillis = 2000
                    0.1f at 0
                    0.8f at (index * 100)
                    0.4f at (index * 100 + 300)
                    0.1f at 2000
                },
                repeatMode = RepeatMode.Restart
            )
        )
    }

    LaunchedEffect(isPlaying) {
        if (isPlaying) {
            showVisualizer = true
            // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            audioProgress = 0f
            while (audioProgress < 1f && isPlaying) {
                delay(100)
                audioProgress += 0.005f
            }
        } else {
            showVisualizer = false
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(backgroundGradient)
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(bottom = 8.dp)
        ) {
            // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
            TopAppBar(
                title = {
                    Text(
                        "–ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑",
                        fontWeight = FontWeight.Bold
                    )
                },
                navigationIcon = {
                    TextButton(onClick = onBackClick) {
                        Text("‚Üê –ù–∞–∑–∞–¥", color = Color.White)
                    }
                },
                backgroundColor = Color(0xFF2A2A3C),
                elevation = 8.dp
            )

            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                Text(
                    text = "–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.White,
                    modifier = Modifier.padding(bottom = 24.dp)
                )

                // –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .heightIn(min = 120.dp),
                    shape = RoundedCornerShape(16.dp),
                    elevation = 4.dp,
                    backgroundColor = Color(0xFF2A2A3C)
                ) {
                    Column {
                        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .background(accentGradient)
                                .padding(12.dp)
                        ) {
                            Text(
                                text = "–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è",
                                color = Color.White,
                                fontWeight = FontWeight.Medium
                            )
                        }

                        // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–∞
                        SelectionContainer {
                            Text(
                                text = textToSpeech,
                                modifier = Modifier.padding(16.dp),
                                fontSize = 16.sp,
                                color = Color.White,
                                lineHeight = 24.sp
                            )
                        }
                    }
                }

                Spacer(modifier = Modifier.height(32.dp))

                // –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
                if (showVisualizer && isPlaying) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(60.dp)
                            .padding(horizontal = 32.dp),
                        horizontalArrangement = Arrangement.Center,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        barHeights.forEach { animatedValue ->
                            Box(
                                modifier = Modifier
                                    .weight(1f)
                                    .padding(horizontal = 2.dp)
                                    .fillMaxHeight(animatedValue.value)
                                    .clip(RoundedCornerShape(2.dp))
                                    .background(accentGradient)
                            )
                        }
                    }

                    // –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                    LinearProgressIndicator(
                        progress = audioProgress,
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(top = 16.dp, bottom = 24.dp, start = 16.dp, end = 16.dp),
                        color = Color(0xFF8338EC),
                        backgroundColor = Color(0xFF444444)
                    )
                } else {
                    Spacer(modifier = Modifier.height(100.dp))
                }

                // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 16.dp),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    // –ö–Ω–æ–ø–∫–∞ "–û–∑–≤—É—á–∏—Ç—å"
                    Button(
                        onClick = {
                            scope.launch {
                                onGenerateAudio()
                            }
                        },
                        enabled = !isGenerating,
                        shape = RoundedCornerShape(16.dp),
                        colors = ButtonDefaults.buttonColors(
                            backgroundColor = Color(0xFF8338EC),
                            disabledBackgroundColor = Color(0xFF444444)
                        ),
                        modifier = Modifier
                            .weight(1f)
                            .height(56.dp)
                            .padding(end = 8.dp)
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.Center
                        ) {
                            if (isGenerating) {
                                CircularProgressIndicator(
                                    color = Color.White,
                                    modifier = Modifier.size(24.dp),
                                    strokeWidth = 2.dp
                                )
                            } else {
                                Text(
                                    text = "üéôÔ∏è",
                                    fontSize = 20.sp
                                )
                            }

                            Spacer(modifier = Modifier.width(8.dp))

                            Text(
                                text = if (isGenerating) "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." else "–û–∑–≤—É—á–∏—Ç—å",
                                color = Color.White,
                                fontWeight = FontWeight.Bold
                            )
                        }
                    }

                    // –ö–Ω–æ–ø–∫–∞ "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏"
                    Button(
                        onClick = {
                            scope.launch {
                                onPlayAudio()
                            }
                        },
                        enabled = !isGenerating,
                        shape = RoundedCornerShape(16.dp),
                        colors = ButtonDefaults.buttonColors(
                            backgroundColor = if (isPlaying) Color(0xFFE63946) else Color(0xFF3A86FF),
                            disabledBackgroundColor = Color(0xFF444444)
                        ),
                        modifier = Modifier
                            .weight(1f)
                            .height(56.dp)
                            .padding(start = 8.dp)
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.Center
                        ) {
                            Text(
                                text = if (isPlaying) "‚è∏Ô∏è" else "‚ñ∂Ô∏è",
                                fontSize = 20.sp
                            )

                            Spacer(modifier = Modifier.width(8.dp))

                            Text(
                                text = if (isPlaying) "–ü–∞—É–∑–∞" else "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏",
                                color = Color.White,
                                fontWeight = FontWeight.Bold
                            )
                        }
                    }
                }

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 24.dp),
                    shape = RoundedCornerShape(16.dp),
                    backgroundColor = Color(0xFF2A2A3C),
                    elevation = 4.dp
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Text(
                            text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞",
                            color = Color.White,
                            fontWeight = FontWeight.Bold,
                            fontSize = 16.sp
                        )

                        Spacer(modifier = Modifier.height(16.dp))

                        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–∞–π–¥–µ—Ä—ã, —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏ —Ç.–¥.)
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "–¢–µ–º–±—Ä –≥–æ–ª–æ—Å–∞:",
                                color = Color.White,
                                modifier = Modifier.width(120.dp)
                            )

                            Slider(
                                value = 0.7f,
                                onValueChange = {},
                                modifier = Modifier.weight(1f),
                                colors = SliderDefaults.colors(
                                    thumbColor = Color(0xFF8338EC),
                                    activeTrackColor = Color(0xFF8338EC)
                                )
                            )
                        }

                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(
                                text = "–°–∫–æ—Ä–æ—Å—Ç—å:",
                                color = Color.White,
                                modifier = Modifier.width(120.dp)
                            )

                            Slider(
                                value = 0.5f,
                                onValueChange = {},
                                modifier = Modifier.weight(1f),
                                colors = SliderDefaults.colors(
                                    thumbColor = Color(0xFF8338EC),
                                    activeTrackColor = Color(0xFF8338EC)
                                )
                            )
                        }
                    }
                }
            }
        }
    }
}